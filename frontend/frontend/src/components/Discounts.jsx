import React, { useState, useEffect } from 'react';
import axios from 'axios';

// all of the functionality for the discounts (used on all pages)

function Discounts({ category }) {
  const [discounts, setDiscounts] = useState([]);  
  const [page, setPage] = useState(1);  // pages for pagination
  const [totalPages, setTotalPages] = useState(1);  // state for pagination

  useEffect(() => {
    axios
      .get(`http://localhost:3000/discounts/category/${category}?page=${page}`)  // the call to the database
      .then((response) => {
        setDiscounts(response.data.discounts);  // if the response works, get the discounts
        setTotalPages(response.data.totalPages);  // then get the total number of pages (max 6 per page)
      })
      .catch((error) => {
        console.error('Error fetching discounts:', error);
      });
  }, [category, page]);

  const handlePageChange = (newPage) => {  // pagination handling
    setPage(newPage);
  };

  return (
    <div>
      <div className="discountGridContainer">
        {discounts &&
          discounts.map((discount) => (  // maps the discounts to the component and renders the data to the grid
            <div key={discount._id} className="discountGridItem">
              <h3>{discount.business}</h3>
              <p>
                <strong>Eligibility: </strong>
                {discount.eligibility}
                <br />
                <strong>Discount description: </strong>
                {discount.discount}
                <br />
              </p>
              <a href={discount.url} target="_blank" rel="noopener noreferrer">
                Visit {discount.business}
              </a>
            </div>
          ))}
      </div>
      <div className="paginationContainer">  
        {/* the pagination gets the total number of pages generated by the axios response and breaks it into pages of 6 results */}
      <div className="pagination">
  {page > 1 && (
    // the buttons to move bewteen the pages
    <button className="pageBtn" onClick={() => handlePageChange(page - 1)}>Prev</button>  
  )}
  {Array(totalPages)
    .fill(0)
    .map((_, index) => (
      <button
        key={index + 1}
        onClick={() => handlePageChange(index + 1)}
        className={`pageBtn ${page === index + 1 ? 'active' : ''}`}
      > 
      {/* I had to look this up, but I'm glad I know more now! I love that it's creating the pages on the fly */}
        {index + 1}
      </button>
    ))}
  {page < totalPages && (
    <button className="pageBtn" onClick={() => handlePageChange(page + 1)}>Next</button>
  )}
</div></div>
    </div>
  );
}

export default Discounts;